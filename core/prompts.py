from langchain.prompts import PromptTemplate

SentenceClipPrompt = PromptTemplate.from_template(
    '''
    你是一位擅长处理自然语言查询的助手，能够将人类的查询语言(query)按照阿里云的SLS日志服务，将用户的需求分解为结构化语义的两部分，注意！请只返回一个json格式文本，不要重述问题：

    查询的条件：即描述查询范围、条件或过滤逻辑的部分。
    查询的内容：即用户希望获取的目标数据或字段的部分。
    以下是任务规则：

    查询的条件：准确提取query中限定范围、条件、或过滤器的详细描述，一定一定一定要包含条件中的所有信息。例如，IP地址、域名、端口号，文件路径等等。
    查询的内容：明确用户希望检索的目标数据，如字段名、操作类型（如统计、分组、过滤等）。
    在生成的结果中，确保语言清晰、正式，为进一步转换为结构化语言语句（如SLS）奠定基础。使用简洁明确的格式表示分解结果，例如：

    {{
        "query": "<用户原始的query>",
        "parsed": {{
            "condition": "<查询的条件>",
            "target": "<查询的内容>"
        }}
    }}

    请根据以下示例进行分解：
    示例 1:

    {{
        "query": "帮我找找最近的POI日志，172.16.0.1访问的ip",
        "parsed": {{
            "condition": "最近的POI日志，源IP为172.16.0.1",
            "target": "访问的IP地址"
        }}
    }}
    示例 2:

    {{
        "query": "查询一下office日志表，这些域名有没有出现过：insidious16.net nefarious17.org ominous18.com",
        "parsed": {{
            "condition": "office日志表中包含域名：insidious16.net, nefarious17.org, ominous18.com",
            "target": "域名是否出现"
        }}
    }}
    示例 3:

    {{
        "query": "请在DNS表中检索，查询域名包含company.com或corp.com，响应时间超过200ms且响应类型为NXDOMAIN的请求",
        "parsed": {{
            "condition": "DNS表中，域名包含company.com或corp.com，响应时间大于200ms，响应类型为NXDOMAIN",
            "target": "满足条件的请求数据"
        }}
    }}
    请分解以下query，并使用上述格式生成包含query和parsed关键字的结果。确保分解的内容正式且语义明确:"query:{query}"
    '''
)

ConditionPrompt = PromptTemplate.from_template(
    """
    您是一名 Text2DSL 助手。您的任务是将用户问题转换为符合准确 DSL 语法规则的 DSL（特定领域语言）日志查询语句。确保生成的 DSL 查询在语义上符合用户的要求。

    # 步骤
    1. ** 理解用户的查询 **： 仔细阅读并理解用户的问题。提取相关信息，确保正确捕捉到问题背后的核心思想或意图。
    2. ** 制定 DSL 语句 **： 将理解转化为 DSL 语句，确保与用户的意图准确匹配。
    3. ** 验证 DSL 语法 **： 确保生成的 DSL 语句符合所有 DSL 语法规则。
    4. ** 反复检查一致性 **： 重新查看用户的查询，确保 DSL 语句正确表达了用户请求的所有方面。
    5. ** 调整模糊性 **： 如果由于上下文或术语含糊不清而产生歧义，请根据现有上下文决定最合适的解释。在 DSL 中尽可能明确。
    6. ** 语法规范性 **： DSL语言中不得出现管道符"|"，当语言描述出现“A为B”时，对应DSL语句为“A:B”

    # 输出格式
    - **仅输出 DSL 语句**：只提供符合 DSL 语言语法的单一 DSL 语句。确保语句准确反映用户的请求，内容完整，没有语法错误。
    - **不要解释**：禁止输出任何与查询过程、语法验证或其他内容相关的解释，仅提供 DSL 查询结果。

    # 示例
    - ** 注意 **：示例中管道符|的左半部分才是我期望的DSL语句，请仅仅参考管道符|的左半部分；如果没有管道符|，则整个部分都是DSL语句。
    {long_term}

    # 注意
    - 确保 DSL 语句完全符合公认的语法和用户查询的语义要求。
    - 如果由于术语模糊而需要消除歧义，请根据上下文做出最佳假设。
    - 根据 DSL 的语法规则在逻辑中运行，验证输出结果。在提供最终答案之前，根据需要调整错误。

    # 输出格式
    - 仅输出符合 DSL 语法规则的查询语句。

    # 用户提问
    {question}

    # 输出

    """
)
TargetPrompt = PromptTemplate.from_template(
'''
    给定一个输入问题，创建一个语法正确的SQL查询来运行。

    # 特殊规则
    1.如果自然语言输入表达的查询目标模糊，例如"域名是否存在"、"满足条件的日志数据"，即没有明确的查询目标，则直接返回空字符串 ""。
    2.如果自然语言输入中明确表示"select *"但未限定具体条件或目标，也直接返回空字符串 ""。
    3.sql语句在一行内显示，不需要换行符
    4.**当需要统计时直接使用COUNT(*)等聚合函数**

    # 示例
    问题："统计每个源IP的流量总数"
    SQL语句: SELECT src_ip, COUNT(*) AS count GROUP BY src_ip

    问题："记录的数量"
    SQL语句: select count(*)

    问题："统计IP地址数量"
    SQL语句: select  count(distinct(_address_)) as total

    问题："查一下哪些人"
    SQL语句: SELECT staff_id

    # 输出格式
    仅输出符合 SQL 语法规则的查询语句。

    问题: "{question}"
'''
)

Post_Refine = PromptTemplate.from_template(
'''
    你是一位擅长处理自然语言查询的助手，能够将人类的查询语言(query)按照阿里云的SLS日志服务。
    
    # 要求
    1. 你需要检查输入的阿里云日志服务请求的语法正确性以及其与用户输入需求的一致性；
    2. 你需要执行输入的阿里云日志服务请求，并预测结果是否会与用户的需求一致；
    3. 如果输入的阿里云日志服务请求与用户的需求一致，则精确地复述该阿里云日志服务请求指令；
    4. 如果输入的阿里云日志服务请求指令存在冗余、语法错误、与用户需求不一致，则对输入的输入的阿里云日志服务请求进行修改，使其满足用户的需求。

    # 输入
    阿里云日志服务请求: "{sls_command}"
    用户输入需求: "{input_prompt}"

    # 输出格式，通过代码格式输出，例如：
    【Example 1】
    ```
        source_ip:200.1.109.72
    ```
    【Example 2】
    ```
        * | SELECT COUNT(*) FROM log WHERE __topic__ = log
    ```
    【Example 3】
    ```
        request_method:GET AND request_length:612 | SELECT COUNT(*)
    ```
    
    接下来请输出你的结果，注意使用符合用户需求的阿里云日志服务请求指令，确保语法正确性和一致性。仅输出阿里云日志服务请求指令，不要输出任何其他内容！
    # 输出

'''
)

Post_Check = PromptTemplate.from_template(
'''
    你是一位擅长处理自然语言查询的助手，能够将人类的查询语言(query)按照阿里云的SLS日志服务。
    
    # 要求
    1. 你需要检查输入的阿里云日志服务请求的语法正确性以及其与用户输入需求的一致性；
    2. 你需要执行输入的阿里云日志服务请求，并预测结果是否会与用户的需求一致；
    3. 如果输入的阿里云日志服务请求与用户的需求一致，则输出“允许执行”，否则输出“不允许执行”，不要输出任何其他内容！

    # 输入
    阿里云日志服务请求: "{sls_command}"
    用户输入需求: "{input_prompt}"

    # 输出
            
'''
)

Post_Explain = PromptTemplate.from_template(
'''
    你是一位擅长处理自然语言查询的助手，能够通过人类的查询语言(query)，解释阿里云的SLS日志服务的返回结果。
    
    # 要求
    1. 你需要根据输入的阿里云日志服务请求以及其与用户输入的需求解释返回结果；

    # 输入
    阿里云日志服务请求: "{sls_command}"
    阿里云日志服务请求结果: "{sls_response}"
    用户输入需求: "{input_prompt}"

    # 输出

'''
)